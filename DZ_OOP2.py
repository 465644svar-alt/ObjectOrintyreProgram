# Разработай систему управления учетными записями пользователей для небольшой компании.
# Компания разделяет сотрудников на обычных работников и администраторов.
# У каждого сотрудника есть уникальный идентификатор (ID), имя и уровень доступа.
# Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа и могут добавлять или удалять пользователя из системы.
# Требования:
# 1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе: ID, имя и уровень доступа ('user' для обычных сотрудников).
#
# 2.Класс Admin: Этот класс должен наследоваться от класса User. Добавь дополнительный атрибут уровня доступа,
# специфичный для администраторов ('admin'). Класс должен также содержать методы add_user и remove_user, которые
# позволяют добавлять и удалять пользователей из списка (представь, что это просто список экземпляров User).
#
# 3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи. Предоставь доступ к
# необходимым атрибутам через методы (например, get и set методы).
class User:
    def __init__(self, id, name, dostupid=False):
        self.id = id
        self.name = name
        self.dostupid = dostupid
        if dostupid == False:
                print("Close")
        elif dostupid == True:
                print("Open")
     def user_info(self):
         return f"Код пользователя {self.id}, Имя {self.name}, уровень доступа {self.dostupid}"
user1 = User(1, "Viktor", True)
user2 = User(2, "Galina", False)


print(user1.user_info())
print(user2.user_info())




#
# class Admin:
#     def __init__(self, id, name, dostupid=False, admin):
#         super() .__init__(id, name, dostupid = False)
#         self.id = id
#         self.name = name